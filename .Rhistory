install.packages("rquantlib")
install.packages("RQuantLib")
library(RQuantLib)
EO <- EuropeanOption("call", 100, 100, 0.01, 0.03, 0.5, 0.4)
print(EO)
summary(EO)
EOImpVol <- EuropeanOptionImpliedVolatility("call", value=EO$value+0.50, 100, 100, 0.01, 0.03, 0.5, 0.4)
print(EOImpVol)
EOImpVol$impliedVol
install.packages("~/Downloads/Rsafd.zip", repos = NULL)
install.packages("lpSolve")
library("lpSolve")
# Here's an example in which we want more than one solution to a problem
# in which all variables are binary: the 8-queens problem.
obj <- rep (1, 64)
q8  <- make.q8()
dir <- rep (c("=", "<"), c(16, 26))
rhs <- rep (1, 42)
## now calculate 4 solutions
x <- lp('max', obj, , dir, rhs, dense.const = q8,
all.bin = TRUE, num.bin.solns = 4)
x
x$solution
View(`q8`)
View(`q8`)
x <- c(3,4,5,6,7)
y <- c(18,32,50,72,98)
plot(x, y)
plot(x, y, type="l")
system("defaults write org.R-project.R force.LANG en_US.UTF-8")
version
K <- 100
Smax <- 2 * K
K <- 100
K <- 100
Smax <- 2 * K
setwd("~/Documents/private/finanzas-quantitativas/thesis/code")
K = 100
Smax <- 2 * K
version
setwd("~/Documents/private/finanzas-quantitativas/thesis/code")
K = 100
Smax <- 2 * K
install.packages("knitr")
source('~/.active-rstudio-document', echo=TRUE)
setwd("~/Documents/reproducible-research/assignments/peer-assessment-1")
setwd("~/Documents/reproducible-research/assignments/peer-assessment-1")
# First, we download the data set from the web:
# Below, an analysis is performed on a limited sample collection of wearable-electronics-supported walking data. The data come from about two months (Oct. 2012 - Nov. 2012) of an individual's movements tracked by this device in 5-minute intervals.
## Loading and preprocessing the data
setwd("~/Documents/reproducible-research/assignments/peer-assessment-1")
# First, we download the data set from the web:
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip", method="wget", extra="--no-check-certificate", "walking.zip")
# Then, we can read the data into R and check its contents:
data <- read.csv(unz("walking.zip", "activity.csv"))
head(data)
str(data)
# Normally, we would convert the date field into date-formatted values, but it will be better if we leave the dates as factored levels for further analysis.
## What is the mean total number of steps taken per day?
# First, let's take a look at a histogram of the steps taken:
hist(tapply(data$steps, data$date, sum), breaks = 5, xlab = "Steps", main = "")
# Now, let's look at the mean and median of steps taken:
step_mean <- mean(as.numeric(tapply(data$steps, data$date, sum)), na.rm = TRUE)
step_median <- median(as.numeric(tapply(data$steps, data$date, sum)), na.rm = TRUE)
## What is the average daily activity pattern?
# Let's make a time series graph to depict how the average steps per time-step vary throughout the course of a day. To do that, we first set up a new frame and order by interval:
data$interval <- as.factor(as.character(data$interval))
interval_mean <- as.numeric(tapply(data$steps, data$interval, mean, na.rm = TRUE))
intervals <- as.numeric(levels(data$interval))
inter_frame <- data.frame(intervals, interval_mean)
inter_frame <- inter_frame[order(inter_frame$intervals), ]
# Then we can plot:
plot(inter_frame$intervals, inter_frame$interval_mean, type = "l", ylab = "Average Steps Taken During 5-Minute Interval",  xlab = "Time Of Day", xaxt = "n")
axis(side = 1, at = 500 * 0:4, labels = c("00:00", "05:00", "10:00", "15:00", "20:00"))
# Now, the mean seems to reach a maximum at around 8:00am. Let's see exactly what that value is:
sorted <- inter_frame[order(inter_frame$interval_mean), ]
max_interval <- sorted$intervals[dim(sorted)[1]]
# …which corresponds to the time-step between 8:35am and 8:40am.
## Imputing missing values
# When we checked out the top few entries in the data set earlier, there appeared to be several “NA” values. Missing values can often greatly affect an analysis, so let's see just how many “NA"s there are:
summary(data)
dim(data[is.na(data$steps), ])[1]
dim(data)[1]
# So, out of a total of 17,568 entries, there are 2,304 entries that lack steps data. This is over 13% of the data!
# With over 13% of the data missing, we should definitely look into applying some kind of transformation to the steps numbers so that we can get a better look at the underlying trends. Let's just let the value of steps for a given time-step equal the mean of the step values at that time-step over all other days that do not have an "NA” value:
fixed <- vector()
for (i in 1:dim(data)[1]) {
if (is.na(data$steps[i])) {
fixed <- c(fixed, inter_frame$interval_mean[inter_frame$intervals == data$interval[i]])
}
else {
fixed <- c(fixed, data$steps[i])
}
}
# And let's use this new vector to create a new data set without any “NA” values:
data_2 <- data.frame(steps = fixed, date = data$date, interval = data$interval)
head(data_2)
# Let's take a look at the histogram of steps after applying this transformation:
hist(tapply(data_2$steps, data_2$date, sum), breaks = 5, xlab = "Steps", main = "")
# Okay, that looks fairly similar to the earlier histogram. Let's see what kind of influence the inputted values had on the mean and median of the average number of steps per day:
step_mean_2 <- mean(as.numeric(tapply(data_2$steps, data_2$date, sum)))
step_median_2 <- median(as.numeric(tapply(data_2$steps, data_2$date, sum)))
# So, we compare these values to the values we had initially, not much has changed. Of course, the mean remained the same since we just changed the “NA"s to the mean values and the median only went up by about 1 step.
## Are there differences in activity patterns between weekdays and weekends?
# It could be hypothesized that people tend to have very different amounts of steps on weekdays vs. weekends. Let's take a look at if this phenomenon can be viewed in this individual's walking data. First, let's create a new factor variable that indicates if the interval falls during a weekday or weekend. Since we didn't convert the time earlier, we do it here:
data_2$date <- as.Date(as.character(data_2$date), "%Y-%m-%d")
a <- vector()
a[weekdays(data_2$date) %in% c("Saturday", "Sunday")] = "weekend"
a[!weekdays(data_2$date) %in% c("Saturday", "Sunday")] = "weekday"
data_2$week.end <- a
data_2$week.end <- as.factor(as.character(data_2$week.end))
# We can view a few entries in our updated data set with the head function just to make sure everything was added correctly:
head(data_2, 3)
head(data_2[data_2$date == "2012-10-6", ], 3)
# And yes, October 1, 2012 is a weekday and October 6, 2012 is a weekend.
# So, with our new variable in the data set, we can use it to create a panel time series plot similar to the one earlier, but split by weekdays and weekends so that we can see the differences in average steps taken over each day type.
# As before, let's calculate the means for each day type:
weekday <- data_2[data_2$week.end == "weekday", ]
weekend <- data_2[data_2$week.end == "weekend", ]
weekday_means <- as.numeric(tapply(weekday$steps, weekday$interval, mean))
weekend_means <- as.numeric(tapply(weekend$steps, weekend$interval, mean))
# And we can put them in a data frame and sort by the interval just like before:
inter_frame_2 <- data.frame(intervals, weekday_means, weekend_means)
inter_frame_2 <- inter_frame_2[order(inter_frame_2$intervals), ]
# Finally, we can plot:
par(bg = NA, cex = 0.8, mfrow = c(2, 1))
plot(inter_frame_2$intervals, inter_frame_2$weekday_means, type = "l", col = "red", ylab = "Average Steps", xlab = "Time Of Day", main = "Weekday", xaxt = "n")
axis(side = 1, at = 500 * 0:4, labels = c("00:00", "05:00", "10:00", "15:00",  "20:00"))
plot(inter_frame_2$intervals, inter_frame_2$weekend_means, type = "l", col = "blue", ylab = "Average Steps", xlab = "Time Of Day", main = "Weekend", xaxt = "n")
axis(side = 1, at = 500 * 0:4, labels = c("00:00", "05:00", "10:00", "15:00", "20:00"))
hist(tapply(data$steps, data$date, sum), breaks = 5, xlab = "Steps", main = "")
hist(tapply(data$steps, data$date, sum), breaks = 5, xlab = "Steps", main = "")
data$steps
data$date
as.numeric(tapply(data$steps, data$date, sum))
as.factor(data$date)
unique(as.factor(data$date))
as.numeric(tapply(data$steps, data$date, sum))
len(as.numeric(tapply(data$steps, data$date, sum)))
length(as.numeric(tapply(data$steps, data$date, sum)))
step_mean
mean(data$steps)
mean(data$steps, na.rm = TRUE)
plot(inter_frame$intervals, inter_frame$interval_mean, type = "l", ylab = "Average Steps Taken During 5-Minute Interval",  xlab = "Time Of Day", xaxt = "n")
axis(side = 1, at = 500 * 0:4, labels = c("00:00", "05:00", "10:00", "15:00", "20:00"))
data$interval
data$interval
as.factor(as.character(data$interval))
par <- par(bg = NA, cex = 0.8, mfrow = c(2, 1))
plot(inter_frame_2$intervals, inter_frame_2$weekday_means, type = "l", col = "red", ylab = "Average Steps", xlab = "Time Of Day", main = "Weekday", xaxt = "n")
axis(side = 1, at = 500 * 0:4, labels = c("00:00", "05:00", "10:00", "15:00",  "20:00"))
plot(inter_frame_2$intervals, inter_frame_2$weekend_means, type = "l", col = "blue", ylab = "Average Steps", xlab = "Time Of Day", main = "Weekend", xaxt = "n")
axis(side = 1, at = 500 * 0:4, labels = c("00:00", "05:00", "10:00", "15:00", "20:00"))
par(par)
plot(inter_frame_2$intervals, inter_frame_2$weekday_means, type = "l", col = "red", ylab = "Average Steps", xlab = "Time Of Day", main = "Weekday", xaxt = "n")
axis(side = 1, at = 500 * 0:4, labels = c("00:00", "05:00", "10:00", "15:00",  "20:00"))
lines(inter_frame_2$intervals, inter_frame_2$weekend_means, type = "l", col = "blue")
plot(inter_frame_2$intervals, inter_frame_2$weekday_means, type = "l", col = "red", ylab = "Average Steps", xlab = "Time Of Day", main = "Weekday", xaxt = "n")
axis(side = 1, at = 500 * 0:4, labels = c("00:00", "05:00", "10:00", "15:00",  "20:00"))
lines(inter_frame_2$intervals, inter_frame_2$weekend_means, type = "p", col = "blue")
plot(inter_frame_2$intervals, inter_frame_2$weekday_means, type = "l", col = "red", ylab = "Average Steps", xlab = "Time Of Day", main = "Weekday", xaxt = "n")
axis(side = 1, at = 500 * 0:4, labels = c("00:00", "05:00", "10:00", "15:00",  "20:00"))
lines(inter_frame_2$intervals, inter_frame_2$weekend_means, type = "c", col = "blue")
plot(inter_frame_2$intervals, inter_frame_2$weekday_means, type = "l", col = "red", ylab = "Average Steps", xlab = "Time Of Day", main = "Weekday", xaxt = "n")
axis(side = 1, at = 500 * 0:4, labels = c("00:00", "05:00", "10:00", "15:00",  "20:00"))
lines(inter_frame_2$intervals, inter_frame_2$weekend_means, type = "o", col = "blue")
plot(inter_frame_2$intervals, inter_frame_2$weekday_means, type = "l", col = "red", ylab = "Average Steps", xlab = "Time Of Day", main = "Weekday", xaxt = "n")
axis(side = 1, at = 500 * 0:4, labels = c("00:00", "05:00", "10:00", "15:00",  "20:00"))
lines(inter_frame_2$intervals, inter_frame_2$weekend_means, type = "l", col = "blue")
setwd("~/Documents/reproducible-research/assignments/peer-assessment-1")
data <- read.csv(unz("walking.zip", "activity.csv"))
setwd("~/Documents/reproducible-research/assignments/peer-assessment-1")
data <- read.csv(unz("walking.zip", "activity.csv"))
hist(tapply(data$steps, data$date, sum), breaks = 5, xlab = "Steps", main = "")
hist(tapply(data$steps, data$date, sum), xlab = "Steps", main = "")
hist(tapply(data$steps, data$date, sum), xlab = "Steps", main = "Histogram of steps")
total.daily.steps <- as.numeric(tapply(data$steps, data$date, sum))
total.daily.steps
data$date
unique(data$date)
hist(unique(data$date), total.daily.steps)
hist(total.daily.steps, unique(data$date))
hist(total.daily.steps, factor(data$date))
hist(total.daily.steps)
hist(tapply(data$steps, data$date, sum), xlab = "Total Daily Steps", break=20, main = "Histogram of the Total Number of Steps Taken per Day")
hist(tapply(data$steps, data$date, sum), xlab = "Total Daily Steps", breaks=20, main = "Histogram of the Total Number of Steps Taken per Day")
setwd("~/Documents/reproducible-research/assignments/peer-assessment-1/git-repository")
install.packages("xtable")
data$interval <- as.factor(as.character(data$interval))
interval.mean <- as.numeric(tapply(data$steps, data$interval, mean, na.rm = TRUE))
#intervals <- as.numeric(levels(data$interval))
intervals <- data.frame(as.numeric(levels(data$interval)), interval.mean)
View(intervals)
data$interval <- as.factor(as.character(data$interval))
interval.mean <- as.numeric(tapply(data$steps, data$interval, mean, na.rm = TRUE))
#intervals <- as.numeric(levels(data$interval))
intervals <- data.frame(intervals=as.numeric(levels(data$interval)), interval.mean)
intervals <- intervals[order(intervals$intervals), ]
axis(side = 1, at = 500 * 0:4, labels = c("00:00", "05:00", "10:00", "15:00", "20:00"))
data$interval <- as.factor(as.character(data$interval))
interval.mean <- as.numeric(tapply(data$steps, data$interval, mean, na.rm = TRUE))
#intervals <- as.numeric(levels(data$interval))
intervals <- data.frame(intervals=as.numeric(levels(data$interval)), interval.mean)
intervals <- intervals[order(intervals$intervals), ]
View(intervals)
plot(intervals$intervals, intervals$interval.mean, type = "l", ylab = "Average Steps Taken During 5-Minute Interval",  xlab = "Time Of Day", xaxt = "n")
axis(side = 1, at = 500 * 0:4, labels = c("00:00", "05:00", "10:00", "15:00", "20:00"))
plot(intervals$intervals, intervals$interval.mean, type = "l", ylab = "Average steps taken 5-Minute interval",  xlab = "Time of day", xaxt = "n")
axis(side = 1, at = 500 * 0:4, labels = c("00:00", "05:00", "10:00", "15:00", "20:00"))
plot(intervals$intervals, intervals$interval.mean, type = "l", main = "Average steps taken 5-Minute interval",  xlab = "Time of day", xaxt = "n")
axis(side = 1, at = 500 * 0:4, labels = c("00:00", "05:00", "10:00", "15:00", "20:00"))
plot(intervals$intervals, intervals$interval.mean, type = "l", main = "Average steps taken 5-Minute interval",  ylab="Average steps", xlab = "Time of day", xaxt = "n")
axis(side=1, at=500*0:4, labels = c("00:00", "05:00", "10:00", "15:00", "20:00"))
plot(intervals$intervals, intervals$interval.mean, type = "l", main = "Average steps taken 5-Minute interval",  ylab="Average steps", xlab = "Time of day", xaxt = "n")
axis(side=1,labels = c("00:00", "05:00", "10:00", "15:00", "20:00"))
500*0:4
seq(0, 4, 500)
seq(0, 2000, 500)
plot(intervals$intervals, intervals$interval.mean, type = "l", main = "Average steps 5-minute interval",  ylab="Average steps", xlab = "Time of day", xaxt = "n")
axis(side=1, at=seq(0, 2000, 500), labels = c("00:00", "05:00", "10:00", "15:00", "20:00"))
intervals.sorted <- intervals[order(intervals$interval.mean), ]
max.interval <- intervals.sorted$intervals[dim(sorted)[1]]
intervals.sorted <- intervals[order(intervals$interval.mean), ]
dim(intervals.sorted)
head(intervals.sorted)
tail(intervals.sorted)
intervals.sorted <- intervals[order(intervals$interval.mean, decreasing = FALSE), ]
head(intervals.sorted)
intervals.sorted <- intervals[order(intervals$interval.mean, decreasing = TRUE), ]
head(intervals.sorted)
max.interval <- intervals.sorted$intervals[1[1]]
intervals.sorted <- intervals[order(intervals$interval.mean, decreasing = TRUE), ]
head(intervals.sorted)
max.interval <- intervals.sorted$intervals[1[1]]
step.mean
step.median
step.mean <- mean(total.daily.steps, na.rm = TRUE)
step.median <- median(total.daily.steps, na.rm = TRUE)
step.mean
step.median
data <- read.csv(unz("activity.zip", "activity.csv"))
hist(tapply(data$steps, data$date, sum), xlab = "Total Daily Steps", breaks=20, main = "Histogram of the Total Number of Steps Taken per Day")
total.daily.steps <- as.numeric(tapply(data$steps, data$date, sum))
step.mean <- mean(total.daily.steps, na.rm = TRUE)
step.median <- median(total.daily.steps, na.rm = TRUE)
step.mean
step.median
dim(data[is.na(data$steps), ])[1]
s = summary(data)
s
names(s)
is.table(s)
data[is.na(data$steps), ]
dim(data[is.na(data$steps), ])
names(data)
steps <- vector()
for (i in 1:dim(data)[1]) {
if (is.na(data$steps[i])) {
steps <- c(steps, intervals$interval.mean[intervals$intervals == data$interval[i]])
}
else {
steps <- c(steps, data$steps[i])
}
}
dim(data)[1]
View(data)
steps <- vector()
for (i in 1:dim(data)[1]) {
if (is.na(data$steps[i])) {
steps <- c(steps, intervals$interval.mean[intervals$intervals == data$interval[i]])
}
else {
steps <- c(steps, data$steps[i])
}
}
steps2 <- vector()
for (i in 1:dim(data)[1]) {
steps2 <- ifelse(is.na(data$steps[i]), c(steps, intervals$interval.mean[intervals$intervals == data$interval[i]]), c(steps, data$steps[i]))
}
steps2 == steps
steps <- vector()
for (i in 1:dim(data)[1]) {
if (is.na(data$steps[i])) {
steps <- c(steps, intervals$interval.mean[intervals$intervals == data$interval[i]])
}
else {
steps <- c(steps, data$steps[i])
}
}
activity.without.missing.data <- data.frame(steps=steps, date=data$date, interval=data$interval)
head(activity.without.missing.data)
hist(tapply(activity.without.missing.data$steps, activity.without.missing.data$date, sum), xlab = "Total Daily Steps", breaks=20, main = "Histogram of the Total Number of Steps Taken per Day")
hist(tapply(activity.without.missing.data$steps, activity.without.missing.data$date, sum), xlab="Total daily steps", breaks=20, main="Total of steps taken per day")
total.daily.steps <- as.numeric(tapply(activity.without.missing.data$steps, activity.without.missing.data$date, sum))
step.mean <- mean(total.daily.steps)
step.median <- median(total.daily.steps)
step.mean
step.median
